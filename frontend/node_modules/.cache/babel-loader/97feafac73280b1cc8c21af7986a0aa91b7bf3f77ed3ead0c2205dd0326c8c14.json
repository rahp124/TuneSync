{"ast":null,"code":"import axios from 'axios';\nexport const fetchSpotifyData = async token => {\n  const response = await axios.get('https://api.spotify.com/v1/me/top/tracks', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    params: {\n      time_range: 'long_term',\n      // Fetching all-time most played tracks (long_term covers several years)\n      limit: 20 // Limit the results to 10 tracks (you can adjust as needed)\n    }\n  });\n  return response.data;\n};\nexport const fetchYoutubeData = async token => {\n  const response = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n    params: {\n      part: 'snippet',\n      maxResults: 20,\n      playlistId: 'LL',\n      // Special playlist ID for liked videos\n      access_token: token\n    }\n  });\n  return response.data;\n};\nexport const fetchUserUploads = async token => {\n  // Step 1: Get the user's channel ID\n  const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {\n    params: {\n      part: 'contentDetails',\n      mine: true,\n      access_token: token\n    }\n  });\n  const uploadsPlaylistId = channelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;\n\n  // Step 2: Fetch the uploads using the playlist ID\n  const videosResponse = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n    params: {\n      part: 'snippet',\n      maxResults: 10,\n      playlistId: uploadsPlaylistId,\n      access_token: token\n    }\n  });\n  return videosResponse.data;\n};","map":{"version":3,"names":["axios","fetchSpotifyData","token","response","get","headers","Authorization","params","time_range","limit","data","fetchYoutubeData","part","maxResults","playlistId","access_token","fetchUserUploads","channelResponse","mine","uploadsPlaylistId","items","contentDetails","relatedPlaylists","uploads","videosResponse"],"sources":["/Users/rahul/Desktop/TuneSync/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchSpotifyData = async (token) => {\n    const response = await axios.get('https://api.spotify.com/v1/me/top/tracks', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        time_range: 'long_term', // Fetching all-time most played tracks (long_term covers several years)\n        limit: 20, // Limit the results to 10 tracks (you can adjust as needed)\n      },\n    });\n    return response.data;\n  };\n  \n\nexport const fetchYoutubeData = async (token) => {\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n        params: {\n          part: 'snippet',\n          maxResults: 20,\n          playlistId: 'LL', // Special playlist ID for liked videos\n          access_token: token,\n        },\n      });\n    return response.data;\n};\n\nexport const fetchUserUploads = async (token) => {\n    // Step 1: Get the user's channel ID\n    const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {\n      params: {\n        part: 'contentDetails',\n        mine: true,\n        access_token: token,\n      },\n    });\n    \n    const uploadsPlaylistId = channelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;\n  \n    // Step 2: Fetch the uploads using the playlist ID\n    const videosResponse = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n      params: {\n        part: 'snippet',\n        maxResults: 10,\n        playlistId: uploadsPlaylistId,\n        access_token: token,\n      },\n    });\n    \n    return videosResponse.data;\n  };\n  \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,0CAA0C,EAAE;IAC3EC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC,CAAC;IACDK,MAAM,EAAE;MACNC,UAAU,EAAE,WAAW;MAAE;MACzBC,KAAK,EAAE,EAAE,CAAE;IACb;EACF,CAAC,CAAC;EACF,OAAON,QAAQ,CAACO,IAAI;AACtB,CAAC;AAGH,OAAO,MAAMC,gBAAgB,GAAG,MAAOT,KAAK,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,qDAAqD,EAAE;IACpFG,MAAM,EAAE;MACNK,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,IAAI;MAAE;MAClBC,YAAY,EAAEb;IAChB;EACF,CAAC,CAAC;EACJ,OAAOC,QAAQ,CAACO,IAAI;AACxB,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAG,MAAOd,KAAK,IAAK;EAC7C;EACA,MAAMe,eAAe,GAAG,MAAMjB,KAAK,CAACI,GAAG,CAAC,gDAAgD,EAAE;IACxFG,MAAM,EAAE;MACNK,IAAI,EAAE,gBAAgB;MACtBM,IAAI,EAAE,IAAI;MACVH,YAAY,EAAEb;IAChB;EACF,CAAC,CAAC;EAEF,MAAMiB,iBAAiB,GAAGF,eAAe,CAACP,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAACC,cAAc,CAACC,gBAAgB,CAACC,OAAO;;EAE/F;EACA,MAAMC,cAAc,GAAG,MAAMxB,KAAK,CAACI,GAAG,CAAC,qDAAqD,EAAE;IAC5FG,MAAM,EAAE;MACNK,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAEK,iBAAiB;MAC7BJ,YAAY,EAAEb;IAChB;EACF,CAAC,CAAC;EAEF,OAAOsB,cAAc,CAACd,IAAI;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}