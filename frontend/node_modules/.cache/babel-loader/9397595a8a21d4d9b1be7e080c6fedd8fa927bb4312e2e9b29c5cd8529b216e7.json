{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Desktop/TuneSync/frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchSpotifyData, fetchYoutubeData } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  spotifyToken,\n  youtubeToken\n}) => {\n  _s();\n  const [spotifyData, setSpotifyData] = useState([]);\n  const [youtubeData, setYoutubeData] = useState([]);\n  useEffect(() => {\n    if (spotifyToken) {\n      fetchSpotifyData(spotifyToken).then(data => setSpotifyData(data.items)).catch(err => console.error(err));\n    }\n    if (youtubeToken) {\n      fetchYoutubeData(youtubeToken).then(data => setYoutubeData(data.items)).catch(err => console.error(err));\n    }\n  }, [spotifyToken, youtubeToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spotify Recently Played:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: spotifyData.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [track.track.name, \" by \", track.track.artists[0].name]\n      }, track.track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"YouTube Recent Videos:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: youtubeData.map(video => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: video.snippet.title\n      }, video.id.videoId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"NyuJbrxtG8UxdoI4fffHFc4B7T0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","fetchSpotifyData","fetchYoutubeData","jsxDEV","_jsxDEV","Dashboard","spotifyToken","youtubeToken","_s","spotifyData","setSpotifyData","youtubeData","setYoutubeData","then","data","items","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","track","name","artists","id","video","snippet","title","videoId","_c","$RefreshReg$"],"sources":["/Users/rahul/Desktop/TuneSync/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchSpotifyData, fetchYoutubeData } from '../api';\n\nconst Dashboard = ({ spotifyToken, youtubeToken }) => {\n  const [spotifyData, setSpotifyData] = useState([]);\n  const [youtubeData, setYoutubeData] = useState([]);\n\n  useEffect(() => {\n    if (spotifyToken) {\n      fetchSpotifyData(spotifyToken)\n        .then(data => setSpotifyData(data.items))\n        .catch(err => console.error(err));\n    }\n\n    if (youtubeToken) {\n      fetchYoutubeData(youtubeToken)\n        .then(data => setYoutubeData(data.items))\n        .catch(err => console.error(err));\n    }\n  }, [spotifyToken, youtubeToken]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <h2>Spotify Recently Played:</h2>\n      <ul>\n        {spotifyData.map(track => (\n          <li key={track.track.id}>{track.track.name} by {track.track.artists[0].name}</li>\n        ))}\n      </ul>\n      \n      <h2>YouTube Recent Videos:</h2>\n      <ul>\n        {youtubeData.map(video => (\n          <li key={video.id.videoId}>{video.snippet.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,SAAS,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,IAAIO,YAAY,EAAE;MAChBL,gBAAgB,CAACK,YAAY,CAAC,CAC3BO,IAAI,CAACC,IAAI,IAAIJ,cAAc,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC,CACxCC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;IACrC;IAEA,IAAIV,YAAY,EAAE;MAChBL,gBAAgB,CAACK,YAAY,CAAC,CAC3BM,IAAI,CAACC,IAAI,IAAIF,cAAc,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC,CACxCC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,CAACX,YAAY,EAAEC,YAAY,CAAC,CAAC;EAEhC,oBACEH,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBpB,OAAA;MAAAgB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCpB,OAAA;MAAAgB,QAAA,EACGX,WAAW,CAACgB,GAAG,CAACC,KAAK,iBACpBtB,OAAA;QAAAgB,QAAA,GAA0BM,KAAK,CAACA,KAAK,CAACC,IAAI,EAAC,MAAI,EAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACD,IAAI;MAAA,GAAlED,KAAK,CAACA,KAAK,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyD,CACjF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAELpB,OAAA;MAAAgB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BpB,OAAA;MAAAgB,QAAA,EACGT,WAAW,CAACc,GAAG,CAACK,KAAK,iBACpB1B,OAAA;QAAAgB,QAAA,EAA4BU,KAAK,CAACC,OAAO,CAACC;MAAK,GAAtCF,KAAK,CAACD,EAAE,CAACI,OAAO;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2B,CACrD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CApCIH,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAsCf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}