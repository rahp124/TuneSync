{"ast":null,"code":"import axios from 'axios';\nexport const fetchSpotifyData = async token => {\n  const response = await axios.get('https://api.spotify.com/v1/me/top/tracks', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    params: {\n      time_range: 'long_term',\n      limit: 20\n    }\n  });\n  const tracks = response.data.items;\n  const genres = [];\n\n  // Extract genres from the artists for each track\n  for (const track of tracks) {\n    const artistIds = track.artists.map(artist => artist.id);\n\n    // Get artist genres\n    for (const artistId of artistIds) {\n      const artistResponse = await axios.get(`https://api.spotify.com/v1/artists/${artistId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      genres.push(...artistResponse.data.genres);\n    }\n  }\n  return {\n    tracks,\n    genres\n  };\n};\nexport const fetchYoutubeData = async token => {\n  const response = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n    params: {\n      part: 'snippet,contentDetails',\n      maxResults: 10,\n      playlistId: 'LL',\n      // Special playlist for liked videos\n      access_token: token\n    }\n  });\n  const videos = response.data.items;\n  const genres = [];\n\n  // For each video, get tags and categories\n  for (const video of videos) {\n    const videoId = video.contentDetails.videoId;\n    const videoResponse = await axios.get('https://www.googleapis.com/youtube/v3/videos', {\n      params: {\n        part: 'snippet',\n        id: videoId,\n        access_token: token\n      }\n    });\n    const videoData = videoResponse.data.items[0];\n    genres.push(...videoData.snippet.tags); // You can use tags as inferred genres\n  }\n  return {\n    videos,\n    genres\n  };\n};\nexport const fetchUserUploads = async token => {\n  // Step 1: Get the user's channel ID\n  const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {\n    params: {\n      part: 'contentDetails',\n      mine: true,\n      access_token: token\n    }\n  });\n  const uploadsPlaylistId = channelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;\n\n  // Step 2: Fetch the uploads using the playlist ID\n  const videosResponse = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n    params: {\n      part: 'snippet',\n      maxResults: 10,\n      playlistId: uploadsPlaylistId,\n      access_token: token\n    }\n  });\n  return videosResponse.data;\n};\n\n// Function to count genre frequencies\nexport const countGenres = (spotifyGenres, youtubeGenres) => {\n  const genreMap = {};\n\n  // Count frequency from Spotify genres\n  spotifyGenres.forEach(genre => {\n    genreMap[genre] = (genreMap[genre] || 0) + 1;\n  });\n\n  // Count frequency from YouTube tags (used as genres)\n  youtubeGenres.forEach(genre => {\n    genreMap[genre] = (genreMap[genre] || 0) + 1;\n  });\n\n  // Sort genres by frequency\n  const sortedGenres = Object.entries(genreMap).sort((a, b) => b[1] - a[1]);\n  return sortedGenres;\n};\nexport const fetchSpotifyRecommendations = async (token, topGenres) => {\n  const genreSeeds = topGenres.slice(0, 5).map(genre => genre[0]); // Use top 5 genres\n  const response = await axios.get('https://api.spotify.com/v1/recommendations', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    params: {\n      seed_genres: genreSeeds.join(','),\n      limit: 10 // Number of recommendations\n    }\n  });\n  return response.data.tracks;\n};\nexport const fetchYoutubeRecommendations = async (token, topGenres) => {\n  const query = topGenres.slice(0, 5).map(genre => genre[0]).join(' '); // Use top genres as query\n  const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n    params: {\n      part: 'snippet',\n      q: query,\n      // Search based on genres\n      type: 'video',\n      maxResults: 10,\n      access_token: token\n    }\n  });\n  return response.data.items;\n};","map":{"version":3,"names":["axios","fetchSpotifyData","token","response","get","headers","Authorization","params","time_range","limit","tracks","data","items","genres","track","artistIds","artists","map","artist","id","artistId","artistResponse","push","fetchYoutubeData","part","maxResults","playlistId","access_token","videos","video","videoId","contentDetails","videoResponse","videoData","snippet","tags","fetchUserUploads","channelResponse","mine","uploadsPlaylistId","relatedPlaylists","uploads","videosResponse","countGenres","spotifyGenres","youtubeGenres","genreMap","forEach","genre","sortedGenres","Object","entries","sort","a","b","fetchSpotifyRecommendations","topGenres","genreSeeds","slice","seed_genres","join","fetchYoutubeRecommendations","query","q","type"],"sources":["/Users/rahul/Desktop/TuneSync/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchSpotifyData = async (token) => {\n    const response = await axios.get('https://api.spotify.com/v1/me/top/tracks', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        time_range: 'long_term',\n        limit: 20,\n      },\n    });\n  \n    const tracks = response.data.items;\n    const genres = [];\n  \n    // Extract genres from the artists for each track\n    for (const track of tracks) {\n      const artistIds = track.artists.map(artist => artist.id);\n      \n      // Get artist genres\n      for (const artistId of artistIds) {\n        const artistResponse = await axios.get(`https://api.spotify.com/v1/artists/${artistId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        genres.push(...artistResponse.data.genres);\n      }\n    }\n  \n    return { tracks, genres };\n  };\n  \n\n  export const fetchYoutubeData = async (token) => {\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n      params: {\n        part: 'snippet,contentDetails',\n        maxResults: 10,\n        playlistId: 'LL', // Special playlist for liked videos\n        access_token: token,\n      },\n    });\n  \n    const videos = response.data.items;\n    const genres = [];\n  \n    // For each video, get tags and categories\n    for (const video of videos) {\n      const videoId = video.contentDetails.videoId;\n      const videoResponse = await axios.get('https://www.googleapis.com/youtube/v3/videos', {\n        params: {\n          part: 'snippet',\n          id: videoId,\n          access_token: token,\n        },\n      });\n  \n      const videoData = videoResponse.data.items[0];\n      genres.push(...videoData.snippet.tags); // You can use tags as inferred genres\n    }\n  \n    return { videos, genres };\n  };\n  \n\nexport const fetchUserUploads = async (token) => {\n    // Step 1: Get the user's channel ID\n    const channelResponse = await axios.get('https://www.googleapis.com/youtube/v3/channels', {\n      params: {\n        part: 'contentDetails',\n        mine: true,\n        access_token: token,\n      },\n    });\n    \n    const uploadsPlaylistId = channelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;\n  \n    // Step 2: Fetch the uploads using the playlist ID\n    const videosResponse = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\n      params: {\n        part: 'snippet',\n        maxResults: 10,\n        playlistId: uploadsPlaylistId,\n        access_token: token,\n      },\n    });\n    \n    return videosResponse.data;\n  };\n  \n\n  // Function to count genre frequencies\nexport const countGenres = (spotifyGenres, youtubeGenres) => {\n    const genreMap = {};\n  \n    // Count frequency from Spotify genres\n    spotifyGenres.forEach(genre => {\n      genreMap[genre] = (genreMap[genre] || 0) + 1;\n    });\n  \n    // Count frequency from YouTube tags (used as genres)\n    youtubeGenres.forEach(genre => {\n      genreMap[genre] = (genreMap[genre] || 0) + 1;\n    });\n  \n    // Sort genres by frequency\n    const sortedGenres = Object.entries(genreMap).sort((a, b) => b[1] - a[1]);\n  \n    return sortedGenres;\n  };\n\n  \n  export const fetchSpotifyRecommendations = async (token, topGenres) => {\n    const genreSeeds = topGenres.slice(0, 5).map(genre => genre[0]); // Use top 5 genres\n    const response = await axios.get('https://api.spotify.com/v1/recommendations', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        seed_genres: genreSeeds.join(','),\n        limit: 10, // Number of recommendations\n      },\n    });\n  \n    return response.data.tracks;\n  };\n\n  export const fetchYoutubeRecommendations = async (token, topGenres) => {\n    const query = topGenres.slice(0, 5).map(genre => genre[0]).join(' '); // Use top genres as query\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n      params: {\n        part: 'snippet',\n        q: query, // Search based on genres\n        type: 'video',\n        maxResults: 10,\n        access_token: token,\n      },\n    });\n  \n    return response.data.items;\n  };\n  \n\n  \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}